type AddResponse {
    status: Boolean
    message: String
    _id: ID
}

type UpdateDeleteResponse {
    status: Boolean
    message: String
}

type Distributor {
    _id: ID
    id_fiscal: String
    nombre: String
    active: Boolean
}

type DistributorResGetAll {
    status: Boolean
    message: String
    data: [Distributor
    ]
}

input DistributorInput {
    nombre: String!
    id_fiscal: String!
}

input DistributorInputUpdate {
    nombre: String
    id_fiscal: String
    active: Boolean
}

type RoomType {
    _id: ID
    nombre: String
    active: Boolean
}

type RoomTypeResGetAll {
    status: Boolean
    message: String
    data: [RoomType
    ]
}

input RoomTypeInput {
    nombre: String!
}

input RoomTypeInputUpdate {
    nombre: String
    active: Boolean
}

type Theater {
    _id: ID
    nombre: String
    active: Boolean
}

type TheaterResGetAll {
    status: Boolean
    message: String
    data: [Theater
    ]
}

input TheaterInput {
    nombre: String!
}

input TheaterInputUpdate {
    nombre: String
    active: Boolean
}

type MovieFormat {
    _id: ID
    movieFormatName: String
    active: Boolean
}

type MovieFormatResGetAll {
    status: Boolean
    message: String
    data: [MovieFormat
    ]
}

input MovieFormatInput {
    movieFormatName: String!
}

input MovieFormatInputUpdate {
    movieFormatName: String
    active: Boolean
}







type MovieLanguage {
    _id: ID
    movieLanguageName: String
    active: Boolean
}

type MovieLanguageResGetAll {
    status: Boolean
    message: String
    data: [MovieLanguage
    ]
}

input MovieLanguageInput {
    movieLanguageName: String!
}

input MovieLanguageInputUpdate {
    movieLanguageName: String
    active: Boolean
}







type Room {
    _id: ID
    idTheater: ID
    roomNumber: Int
    roomName: String
    numberChairs: Int
    supportedFormats: [RoomSupportedFormats]
    active: Boolean
}

type RoomSupportedFormats {
    idMovieFormat: ID
    cleaningTime: Int
}

type RoomResGetAll {
    status: Boolean
    message: String
    data: [Room]
}

input RoomSupportedFormatsInput {
    idMovieFormat: ID
    cleaningTime: Int
}

input RoomInput {
    idTheater: ID!
    roomNumber: Int!
    roomName: String!
    numberChairs: Int!
    supportedFormats: [RoomSupportedFormatsInput!]!
}

input RoomInputUpdate {
    idTheater: ID
    roomNumber: Int
    roomName: String
    numberChairs: Int
    supportedFormats: [RoomSupportedFormatsInput!]
    active: Boolean
}





type Movie {
    _id: ID
    idDistributor: ID
    idMovieFormat: ID
    idMovieLanguage: ID
    systemCode: String
    movieName: String
    duration: Int
    rating: Int
    active: Boolean
}

type MovieResGetAll {
    status: Boolean
    message: String
    data: [Movie
    ]
}

input MovieInput {
    idDistributor: ID!
    idMovieFormat: ID!
    idMovieLanguage: ID!
    systemCode: String
    movieName: String!
    duration: Int!
    rating: Int!
}

input MovieInputUpdate {
    idDistributor: ID
    idMovieFormat: ID
    idMovieLanguage: ID
    systemCode: String
    movieName: String
    duration: Int
    rating: Int
    active: Boolean
}

type UserOption {
    _id: ID
    nombre: String
    actions: [String!
    ]
    active: Boolean
}

type UserOptionResGetAll {
    status: Boolean
    message: String
    data: [UserOption
    ]
}

input UserOptionInput {
    nombre: String!
    actions: [String!
    ]!
}

input UserOptionInputUpdate {
    nombre: String
    actions: [String!
    ]
    active: Boolean
}

type UserRol {
    _id: ID
    nombre: String
    permissions: [UserRolPermission!
    ]
    active: Boolean
}

type UserRolPermission {
    idUserOption: ID!
    nameUserOption: String!
    actions: [String!
    ]!
}

input UserRolPermissionInput {
    idUserOption: ID!
    nameUserOption: String!
    actions: [String!
    ]!
}

type UserRolResGetAll {
    status: Boolean
    message: String
    data: [UserRol
    ]
}

input UserRolInput {
    nombre: String!
    permissions: [UserRolPermissionInput!
    ]!
}

input UserRolInputUpdate {
    nombre: String
    permissions: [UserRolPermissionInput!
    ]
    active: Boolean
}

type User {
    _id: ID
    idTheater: ID
    idUserRol: ID
    fullName: String
    email: String
    userName: String
    active: Boolean
}

type UserResGetAll {
    status: Boolean
    message: String
    data: [User
    ]
}

input UserInput {
    idUserRol: ID!
    idTheater: ID!
    fullName: String!
    email: String!
    userName: String!
    password: String!
}

input UserInputUpdate {
    idUserRol: ID
    idTheater: ID
    fullName: String
    email: String
    userName: String
    password: String
    active: Boolean
}








type Period {
    _id: ID
    flag: String
    dateFrom: String
    dateUp: String
    active: Boolean
}

type PeriodResGetAll {
    status: Boolean
    message: String
    data: [Period
    ]
}

input PeriodInput {
    flag: String
    dateFrom: String
    dateUp: String
}

input PeriodInputUpdate {
    flag: String
    dateFrom: String
    dateUp: String
    active: Boolean
}









type ScheduleMovies {
    idMovie: ID
    movieName: String
    duration: Int
    scheduleAttributes: [ScheduleScheduleAttribute]
    cleaningTime: Int
    startAt: String
    endAt: String
}

type ScheduleScheduleAttribute{
    idScheduleAttribute: ID
    scheduleAttributeName: String
    duration: Int
}

type ScheduleRoom {
    idRoom: ID
    roomNumber: Int
    roomName: String
    supportedFormats: [RoomSupportedFormats]
    movies: [ScheduleMovies
    ]
}

type Schedule {
    _id: ID
    idPeriod: ID
    idTheater: ID
    rooms: [ScheduleRoom
    ]
    active: Boolean
}

type ScheduleResGetAll {
    status: Boolean
    message: String
    data: [Schedule
    ]
}

type ScheduleResGetOne {
    status: Boolean
    message: String
    data: Schedule
}

input ScheduleMoviesInput {
    idMovie: ID
    scheduleAttributes: [ScheduleScheduleAttributeInput]
    cleaningTime: Int
    startAt: String
    endAt: String
}

input ScheduleScheduleAttributeInput{
    idScheduleAttribute: ID
    scheduleAttributeName: String
    duration: Int

}

input ScheduleRoomInput {
    idRoom: ID
    movies: [ScheduleMoviesInput
    ]
}


input ScheduleInput {
    idPeriod: ID
    idTheater: ID
    rooms: [ScheduleRoomInput
    ]
}

input ScheduleInputUpdate {
    idPeriod: ID
    idTheater: ID
    rooms: [ScheduleRoomInput
    ]
    active: Boolean
}












type ScheduleAttribute{
    _id: ID
    scheduleAttributeName: String
    defaultDuration: Int
    active: Boolean
}

type ScheduleAttributeGetAll {
    status: Boolean
    message: String
    data: [ScheduleAttribute
    ]
}

input ScheduleAttributeInput{
    scheduleAttributeName: String
    defaultDuration: Int
}

input ScheduleAttributeUpdate{
    scheduleAttributeName: String
    defaultDuration: Int
    active: Boolean
}






type Login {
    status: Boolean
    message: String
    token: String
}

input LoginInputGet {
    userName: String
    password: String
}


type Query {
    "Get all distributors"
    getAllDistributor(token: String!): DistributorResGetAll
    "Get all room types"
    getAllRoomType(token: String!): RoomTypeResGetAll 
    "Get all theaters"
    getAllTheater(token: String!): TheaterResGetAll
    "Get all movie formats"
    getAllMovieFormat(token: String!): MovieFormatResGetAll
    "Get all movie language"
    getAllMovieLanguage(token: String!): MovieLanguageResGetAll
    "Get all rooms"
    getAllRoom(token: String!): RoomResGetAll
    "Get al movies"
    getAllMovie(token: String!): MovieResGetAll
    "Get all user options"
    getAllUserOption(token: String!): UserOptionResGetAll
    "Get all user roles"
    getAllUserRol(token: String!): UserRolResGetAll
    "Get all user"
    getAllUser(token: String!): UserResGetAll
    "Get Period"
    getAllPeriod(token: String!): PeriodResGetAll
    "Get Schedule"
    getAllSchedule(token: String!): ScheduleResGetAll
    getOneSchedule(token: String!, idTheater: String!, idPeriod: String!): ScheduleResGetOne
    "Get ScheduleAttribute"
    getAllScheduleAttribute(token: String!): ScheduleAttributeGetAll
    "Get login"
    getLogin(input: LoginInputGet): Login
}

type Mutation {
    "Add new distributor"
    addDistributor(token: String!, input: DistributorInput!): AddResponse
    "Update distributor"
    updateDistributor(token: String!, _id: ID!, input: DistributorInputUpdate!): UpdateDeleteResponse
    "Delete distributor"
    deleteDistributor(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a new room type"
    addRoomType(token: String!, input: RoomTypeInput!): AddResponse
    "Update a room type"
    updateRoomType(token: String!, _id: ID!, input: RoomTypeInputUpdate!): UpdateDeleteResponse
    "Delete a room type"
    deleteRoomType(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a new theater"
    addTheater(token: String!, input: TheaterInput!): AddResponse
    "Update a theater"
    updateTheater(token: String!, _id: ID!, input: TheaterInputUpdate!): UpdateDeleteResponse
    "Delete a theater"
    deleteTheater(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a new movie format"
    addMovieFormat(token: String!, input: MovieFormatInput!): AddResponse
    "Update a movie format"
    updateMovieFormat(token: String!, _id: ID!, input: MovieFormatInputUpdate!): UpdateDeleteResponse
    "Delete a movie format"
    deleteMovieFormat(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a new movie language"
    addMovieLanguage(token: String!, input: MovieLanguageInput!): AddResponse
    "Update a movie language"
    updateMovieLanguage(token: String!, _id: ID!, input: MovieLanguageInputUpdate!): UpdateDeleteResponse
    "Delete a movie language"
    deleteMovieLanguage(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a room"
    addRoom(token: String!, input: RoomInput!): AddResponse
    "Update a room"
    updateRoom(token: String!, _id: ID!, input: RoomInputUpdate!): UpdateDeleteResponse
    "Delete a room"
    deleteRoom(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a movie"
    addMovie(token: String!, input: MovieInput!): AddResponse
    "Update a movie"
    updateMovie(token: String!, _id: ID!, input: MovieInputUpdate!): UpdateDeleteResponse
    "Delete a movie"
    deleteMovie(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a user option"
    addUserOption(token: String!, input: UserOptionInput!): AddResponse
    "Update a user option"
    updateUserOption(token: String!, _id: ID!, input: UserOptionInputUpdate!): UpdateDeleteResponse
    "Delete a user option"
    deleteUserOption(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a user rol"
    addUserRol(token: String!, input: UserRolInput!): AddResponse
    "Update a user rol"
    updateUserRol(token: String!, _id: ID!, input: UserRolInputUpdate!): UpdateDeleteResponse
    "Delete a user Rol"
    deleteUserRol(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a user"
    addUser(token: String!, input: UserInput!): AddResponse
    "Update a user"
    updateUser(token: String!, _id: ID!, input: UserInputUpdate!): UpdateDeleteResponse
    "Delete a user"
    deleteUser(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a period"
    addPeriod(token: String!, input: PeriodInput!): AddResponse
    "Update a period"
    updatePeriod(token: String!, _id: ID!, input: PeriodInputUpdate!): UpdateDeleteResponse
    "Delete a period"
    deletePeriod(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a schedule"
    addSchedule(token: String!, input: ScheduleInput!): AddResponse
    "Update a schedule"
    updateSchedule(token: String!, _id: ID!, input: ScheduleInputUpdate!): UpdateDeleteResponse
    "Delete a schedule"
    deleteSchedule(token: String!, _id: ID!): UpdateDeleteResponse

    "Add a scheduleAttribute"
    addScheduleAttribute(token: String!, input: ScheduleAttributeInput!): AddResponse
    "Update scheduleAttibute"
    updateScheduleAttribute(token: String!, _id: ID!, input: ScheduleAttributeUpdate!): UpdateDeleteResponse
    "Delete a scheduleAttibute"
    deleteScheduleAttribute(token: String!, _id: ID!): UpdateDeleteResponse
}